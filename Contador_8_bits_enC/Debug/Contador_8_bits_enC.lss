
Contador_8_bits_enC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000424  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000004c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008de  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e4  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000471  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b1  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
  9e:	0c 94 10 02 	jmp	0x420	; 0x420 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_pins>:

// Función para inicializar los pines
void init_pins() {
	
	// Configurar los pines PC0 y PC1 como entradas y habilitar resistencias de pull-up
	DDRC &= ~(1 << DDC0) & ~(1 << DDC1) & ~(1 << DDC6);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8c 7b       	andi	r24, 0xBC	; 188
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	88 b9       	out	0x08, r24	; 8
	

	// Pines de salida
	
	DDRD |= (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7); // PD0-PD7 como salidas
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3) | (1 << DDB4) | (1 << DDB5); // 
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	8f 63       	ori	r24, 0x3F	; 63
  bc:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5); // 
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	8c 63       	ori	r24, 0x3C	; 60
  c2:	87 b9       	out	0x07, r24	; 7
	
	
	// Habilitar interrupciones por cambio de estado en PC0 y PC1
	PCICR |= (1 << PCIE1);
  c4:	e8 e6       	ldi	r30, 0x68	; 104
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);
  ce:	ec e6       	ldi	r30, 0x6C	; 108
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	80 83       	st	Z, r24

	// Habilitar interrupciones globales
	sei();
  d8:	78 94       	sei
	
	// Deshabilitar la funcionalidad de los pines RX y TX (PD0 y PD1)
	UCSR0B = 0x00;
  da:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PORTD = 0;
  de:	1b b8       	out	0x0b, r1	; 11
  e0:	08 95       	ret

000000e2 <increment_counter>:
}

// Función para aumentar el contador
void increment_counter() {
	counter++;
  e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (counter == 256) {
  ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  f0:	08 95       	ret

000000f2 <decrement_counter>:
	}
}

// Función para decrementar el contador
void decrement_counter() {
	if (counter > 0) {
  f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  f6:	88 23       	and	r24, r24
  f8:	31 f0       	breq	.+12     	; 0x106 <decrement_counter+0x14>
		counter--;
  fa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 104:	08 95       	ret
		} else {
		// Pasar al máximo
		counter = 255;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 10c:	08 95       	ret

0000010e <display_counter>:

// Función para mostrar el valor del contador en los LEDs
void display_counter() {
	// Apagar todos los LEDs
	
	PORTD &= ~((1 << PIND0) | (1 << PIND1) | (1 << PIND2) | (1 << PIND3) | (1 << PIND4) | (1 << PIND5) | (1 << PIND6) | (1 << PIND7));
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	1b b8       	out	0x0b, r1	; 11
	
	// Mostrar el valor del contador en los LEDs
	PORTD = counter; 
 112:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 116:	8b b9       	out	0x0b, r24	; 11
 118:	08 95       	ret

0000011a <__vector_4>:
	
}

// Rutina de interrupción
ISR(PCINT1_vect) {	
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	// Comprobar si el botón de incremento (PC0) está presionado
	if (!(PINC & (1 << BUTTON1_PIN))) {
 13c:	30 9b       	sbis	0x06, 0	; 6
		increment_counter();
 13e:	0e 94 71 00 	call	0xe2	; 0xe2 <increment_counter>
	}

	// Comprobar si el botón de decremento (PC1) está presionado
	if (!(PINC & (1 << BUTTON2_PIN))) {
 142:	31 9b       	sbis	0x06, 1	; 6
		decrement_counter();
 144:	0e 94 79 00 	call	0xf2	; 0xf2 <decrement_counter>
	}
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <init_ADC>:


// Función para inicializar ADC
void init_ADC() {
	// Habilitar ADC y configurar preescalador a 128
	ADMUX = 0;
 16a:	ac e7       	ldi	r26, 0x7C	; 124
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	1c 92       	st	X, r1
	ADCSRA = 0;
 170:	ea e7       	ldi	r30, 0x7A	; 122
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 176:	80 81       	ld	r24, Z
 178:	87 68       	ori	r24, 0x87	; 135
 17a:	80 83       	st	Z, r24

	// Configurar referencia de voltaje AVCC con capacitor externo en AREF
	ADMUX |= (1 << REFS0)|(1 <<  ADLAR);
 17c:	8c 91       	ld	r24, X
 17e:	80 66       	ori	r24, 0x60	; 96
 180:	8c 93       	st	X, r24
	
	// Configurar pin A6 como entrada analógica
	ADMUX |= (1 << MUX2) | (1 << MUX1); // A6 en ADMUX[5:0]
 182:	8c 91       	ld	r24, X
 184:	86 60       	ori	r24, 0x06	; 6
 186:	8c 93       	st	X, r24

	// Habilitar interrupción de conversión completa del ADC
	ADCSRA |= (1 << ADIE);
 188:	80 81       	ld	r24, Z
 18a:	88 60       	ori	r24, 0x08	; 8
 18c:	80 83       	st	Z, r24
 18e:	08 95       	ret

00000190 <Display_ADC>:

}

void Display_ADC() {
	
	PORTC |= (LISTA[DISPLAY1]& 0b1000000)>>4|(PORTC & 0b000011);
 190:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <DISPLAY1>
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e0 50       	subi	r30, 0x00	; 0
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	80 81       	ld	r24, Z
 19c:	80 74       	andi	r24, 0x40	; 64
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	28 b1       	in	r18, 0x08	; 8
 1b2:	23 70       	andi	r18, 0x03	; 3
 1b4:	82 2b       	or	r24, r18
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	89 2b       	or	r24, r25
 1ba:	88 b9       	out	0x08, r24	; 8
	PORTC |= (LISTA[DISPLAY1]& 0b0100000)>>4;
 1bc:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <DISPLAY1>
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	80 72       	andi	r24, 0x20	; 32
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	95 95       	asr	r25
 1d2:	87 95       	ror	r24
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	95 95       	asr	r25
 1da:	87 95       	ror	r24
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	89 2b       	or	r24, r25
 1e0:	88 b9       	out	0x08, r24	; 8
	PORTB |= (LISTA[DISPLAY1]& 0b0010000)>>3;
 1e2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <DISPLAY1>
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e0 50       	subi	r30, 0x00	; 0
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	80 81       	ld	r24, Z
 1ee:	80 71       	andi	r24, 0x10	; 16
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	95 95       	asr	r25
 1f4:	87 95       	ror	r24
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	95 95       	asr	r25
 1fc:	87 95       	ror	r24
 1fe:	95 b1       	in	r25, 0x05	; 5
 200:	89 2b       	or	r24, r25
 202:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY1]& 0b0001000)>>1;
 204:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <DISPLAY1>
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	e0 50       	subi	r30, 0x00	; 0
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	80 81       	ld	r24, Z
 210:	88 70       	andi	r24, 0x08	; 8
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	95 b1       	in	r25, 0x05	; 5
 21a:	89 2b       	or	r24, r25
 21c:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY1]& 0b0000100)<<1;
 21e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <DISPLAY1>
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	80 81       	ld	r24, Z
 22a:	84 70       	andi	r24, 0x04	; 4
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	95 b1       	in	r25, 0x05	; 5
 234:	89 2b       	or	r24, r25
 236:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY1]& 0b0000010)<<3;
 238:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <DISPLAY1>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	e0 50       	subi	r30, 0x00	; 0
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	80 81       	ld	r24, Z
 244:	82 70       	andi	r24, 0x02	; 2
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	95 b1       	in	r25, 0x05	; 5
 256:	89 2b       	or	r24, r25
 258:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY1]& 0b0000001);
 25a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <DISPLAY1>
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e0 50       	subi	r30, 0x00	; 0
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	80 81       	ld	r24, Z
 266:	95 b1       	in	r25, 0x05	; 5
 268:	81 70       	andi	r24, 0x01	; 1
 26a:	89 2b       	or	r24, r25
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	08 95       	ret

00000270 <Display2_ADC>:
	
}

void Display2_ADC() {
	
	PORTC |= (LISTA[DISPLAY2]& 0b1000000)>>4|(PORTC & 0b000011);
 270:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DISPLAY2>
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	e0 50       	subi	r30, 0x00	; 0
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	80 81       	ld	r24, Z
 27c:	80 74       	andi	r24, 0x40	; 64
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	95 95       	asr	r25
 282:	87 95       	ror	r24
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	95 95       	asr	r25
 28a:	87 95       	ror	r24
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	28 b1       	in	r18, 0x08	; 8
 292:	23 70       	andi	r18, 0x03	; 3
 294:	82 2b       	or	r24, r18
 296:	98 b1       	in	r25, 0x08	; 8
 298:	89 2b       	or	r24, r25
 29a:	88 b9       	out	0x08, r24	; 8
	PORTC |= (LISTA[DISPLAY2]& 0b0100000)>>4;
 29c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DISPLAY2>
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	e0 50       	subi	r30, 0x00	; 0
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
 2a6:	80 81       	ld	r24, Z
 2a8:	80 72       	andi	r24, 0x20	; 32
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	95 95       	asr	r25
 2ae:	87 95       	ror	r24
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	95 95       	asr	r25
 2ba:	87 95       	ror	r24
 2bc:	98 b1       	in	r25, 0x08	; 8
 2be:	89 2b       	or	r24, r25
 2c0:	88 b9       	out	0x08, r24	; 8
	PORTB |= (LISTA[DISPLAY2]& 0b0010000)>>3;
 2c2:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DISPLAY2>
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e0 50       	subi	r30, 0x00	; 0
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	80 81       	ld	r24, Z
 2ce:	80 71       	andi	r24, 0x10	; 16
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	95 95       	asr	r25
 2dc:	87 95       	ror	r24
 2de:	95 b1       	in	r25, 0x05	; 5
 2e0:	89 2b       	or	r24, r25
 2e2:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY2]& 0b0001000)>>1;
 2e4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DISPLAY2>
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	e0 50       	subi	r30, 0x00	; 0
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	80 81       	ld	r24, Z
 2f0:	88 70       	andi	r24, 0x08	; 8
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	95 95       	asr	r25
 2f6:	87 95       	ror	r24
 2f8:	95 b1       	in	r25, 0x05	; 5
 2fa:	89 2b       	or	r24, r25
 2fc:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY2]& 0b0000100)<<1;
 2fe:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DISPLAY2>
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e0 50       	subi	r30, 0x00	; 0
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	80 81       	ld	r24, Z
 30a:	84 70       	andi	r24, 0x04	; 4
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	95 b1       	in	r25, 0x05	; 5
 314:	89 2b       	or	r24, r25
 316:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY2]& 0b0000010)<<3;
 318:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DISPLAY2>
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	e0 50       	subi	r30, 0x00	; 0
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 81       	ld	r24, Z
 324:	82 70       	andi	r24, 0x02	; 2
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	95 b1       	in	r25, 0x05	; 5
 336:	89 2b       	or	r24, r25
 338:	85 b9       	out	0x05, r24	; 5
	PORTB |= (LISTA[DISPLAY2]& 0b0000001);
 33a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DISPLAY2>
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	e0 50       	subi	r30, 0x00	; 0
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	80 81       	ld	r24, Z
 346:	95 b1       	in	r25, 0x05	; 5
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	89 2b       	or	r24, r25
 34c:	85 b9       	out	0x05, r24	; 5
 34e:	08 95       	ret

00000350 <__vector_21>:
	
	
}


ISR(ADC_vect){
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	8f 93       	push	r24
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31

	CONTADOR_ADC = ADCH;
 360:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 364:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <CONTADOR_ADC>
	DISPLAY1 = CONTADOR_ADC & 0b00001111;
 368:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <CONTADOR_ADC>
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <DISPLAY1>
	DISPLAY2 = CONTADOR_ADC >> 4;
 372:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <CONTADOR_ADC>
 376:	82 95       	swap	r24
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <DISPLAY2>

	ADCSRA |= (1<<ADIF);
 37e:	ea e7       	ldi	r30, 0x7A	; 122
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	80 61       	ori	r24, 0x10	; 16
 386:	80 83       	st	Z, r24


}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	8f 91       	pop	r24
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <comparador>:

void comparador(){
	if (CONTADOR_ADC>counter)
 398:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <CONTADOR_ADC>
 39c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3a0:	89 17       	cp	r24, r25
 3a2:	20 f4       	brcc	.+8      	; 0x3ac <comparador+0x14>
	{
		PORTB |= (1 << PB0);
 3a4:	85 b1       	in	r24, 0x05	; 5
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	85 b9       	out	0x05, r24	; 5
 3aa:	08 95       	ret
		} else{
		PORTB &= ~(1 << PB0);
 3ac:	85 b1       	in	r24, 0x05	; 5
 3ae:	8e 7f       	andi	r24, 0xFE	; 254
 3b0:	85 b9       	out	0x05, r24	; 5
 3b2:	08 95       	ret

000003b4 <main>:

// Función principal
int main() {
	
	// Inicializar los pines
	init_pins();
 3b4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_pins>
	init_ADC();
 3b8:	0e 94 b5 00 	call	0x16a	; 0x16a <init_ADC>

	while (1) {
		display_counter();
 3bc:	0e 94 87 00 	call	0x10e	; 0x10e <display_counter>
		PORTC |= (1<<PC5);
 3c0:	88 b1       	in	r24, 0x08	; 8
 3c2:	80 62       	ori	r24, 0x20	; 32
 3c4:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1<<PC4);
 3c6:	88 b1       	in	r24, 0x08	; 8
 3c8:	8f 7e       	andi	r24, 0xEF	; 239
 3ca:	88 b9       	out	0x08, r24	; 8
		
		PORTB &= 0b11000001;
 3cc:	85 b1       	in	r24, 0x05	; 5
 3ce:	81 7c       	andi	r24, 0xC1	; 193
 3d0:	85 b9       	out	0x05, r24	; 5
		PORTC &= 0b11110011;
 3d2:	88 b1       	in	r24, 0x08	; 8
 3d4:	83 7f       	andi	r24, 0xF3	; 243
 3d6:	88 b9       	out	0x08, r24	; 8
		
		Display_ADC();
 3d8:	0e 94 c8 00 	call	0x190	; 0x190 <Display_ADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3dc:	8f e3       	ldi	r24, 0x3F	; 63
 3de:	9c e9       	ldi	r25, 0x9C	; 156
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <main+0x2c>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x32>
 3e6:	00 00       	nop
		_delay_ms(10);
		PORTC |= (1<<PC4);
 3e8:	88 b1       	in	r24, 0x08	; 8
 3ea:	80 61       	ori	r24, 0x10	; 16
 3ec:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1<<PC5);
 3ee:	88 b1       	in	r24, 0x08	; 8
 3f0:	8f 7d       	andi	r24, 0xDF	; 223
 3f2:	88 b9       	out	0x08, r24	; 8
		
		PORTB &= 0b11000001;
 3f4:	85 b1       	in	r24, 0x05	; 5
 3f6:	81 7c       	andi	r24, 0xC1	; 193
 3f8:	85 b9       	out	0x05, r24	; 5
		PORTC &= 0b11110011;
 3fa:	88 b1       	in	r24, 0x08	; 8
 3fc:	83 7f       	andi	r24, 0xF3	; 243
 3fe:	88 b9       	out	0x08, r24	; 8
		
		Display2_ADC();
 400:	0e 94 38 01 	call	0x270	; 0x270 <Display2_ADC>
 404:	8f e3       	ldi	r24, 0x3F	; 63
 406:	9c e9       	ldi	r25, 0x9C	; 156
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		_delay_ms(10);
		ADCSRA |= (1<<ADSC);
 410:	ea e7       	ldi	r30, 0x7A	; 122
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	80 64       	ori	r24, 0x40	; 64
 418:	80 83       	st	Z, r24
		comparador();
 41a:	0e 94 cc 01 	call	0x398	; 0x398 <comparador>
 41e:	ce cf       	rjmp	.-100    	; 0x3bc <main+0x8>

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
